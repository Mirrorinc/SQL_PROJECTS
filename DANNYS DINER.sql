-- WHAT IS THE TOTAL AMOUNT EACH CUSTOMER SPENT AT THE RESTAURANT --

SELECT SALES.CUSTOMER_ID, SUM(MENU.PRICE) AS TOTAL_AMOUNT_SPENT FROM dannys_diner.menu
AS MENU INNER JOIN dannys_diner.sales 
ON SALES.PRODUCT_ID = MENU.product_id
group BY SALES.CUSTOMER_ID 
order by SALES.CUSTOMER_ID;

-- HOW MANY DAYS HAS EACH CUSTOMER VISITED RESTAURANT? --
SELECT SALES.CUSTOMER_ID, COUNT(DISTINCT SALES.ORDER_DATE) AS VISITED_DAYS
from dannys_diner.sales
group by SALES.CUSTOMER_ID
order by Customer_ID;

-- WHAT WAS THE FIRST ITEM FROM THE MENU PURCHASED BY EACH CUSTOMER? --
SELECT SALES.CUSTOMER_ID, SALES.ORDER_DATE, MENU.PRODUCT_NAME FROM dannys_diner.menu AS MENU
INNER JOIN dannys_diner.SALES AS SALES ON SALES.PRODUCT_ID = MENU.product_id
WHERE SALES.ORDER_DATE = (
SELECT MIN(SALES_1.ORDER_DATE)
FROM dannys_diner.sales AS SALES_1
WHERE SALES.CUSTOMER_ID = SALES.CUSTOMER_ID
);

-- WHAT IS THE MOST PURCHASED ITEM ON THE MENU AND HOW MNAY TIMES WAS IT PURCHASED BY ALL CUSTOMERS? --
SELECT MENU.PRODUCT_NAME, COUNT(SALES.PRODUCT_ID) AS TIMES_PURCHASED FROM dannys_diner.menu AS MENU
INNER JOIN dannys_diner.SALES AS SALES ON MENU.product_id = SALES.PRODUCT_ID
group by MENU.product_name LIMIT 2,1;

-- WHICH ITEM WAS THE MOST POPULAR FOR EACH CUSTOMER? --
WITH CUSTOMER_ORDER_COUNTS AS 
(
SELECT SALES.CUSTOMER_ID, MENU.PRODUCT_NAME, COUNT(MENU.PRODUCT_NAME) AS ORDER_COUNT
FROM dannys_diner.menu AS MENU 
INNER JOIN dannys_diner.sales AS SALES 
ON SALES.product_id = MENU.product_id
GROUP BY MENU.PRODUCT_NAME, SALES.Customer_ID
ORDER BY ORDER_COUNT DESC
)
SELECT * FROM CUSTOMER_ORDER_COUNTS AS OC WHERE OC.ORDER_COUNT =
(
SELECT MAX(OC_2.ORDER_COUNT) 
FROM CUSTOMER_ORDER_COUNTS AS OC_2
WHERE OC_2.CUSTOMER_ID = OC.CUSTOMER_ID
)
ORDER BY OC.CUSTOMER_ID;

-- WHICH ITEM WAS PURCHASED FIRST BY THE CUSTOMER AFTER THEY BECAME A MEMBER? --
WITH MEMBER_SALES
AS (
SELECT SALES.CUSTOMER_ID, SALES.ORDER_DATE, MEMBERS.JOIN_DATE, SALES.PRODUCT_ID, DENSE_RANK ()
OVER (PARTITION BY SALES.CUSTOMER_ID ORDER BY SALES.ORDER_DATE) MEMBER_SALES_RANK
FROM DANNYS_DINER.SALES AS SALES
JOIN DANNYS_DINER.MEMBERS AS MEMBERS 
ON MEMBERS.CUSTOMER_ID = SALES.CUSTOMER_ID
WHERE SALES.ORDER_DATE >= MEMBERS.JOIN_DATE
)
SELECT MEMBER_SALES.CUSTOMER_ID, MENU.PRODUCT_NAME, MEMBER_SALES.ORDER_DATE 
FROM MEMBER_SALES 
JOIN DANNYS_DINER.MENU AS MENU
ON MEMBER_SALES.PRODUCT_ID = MENU.PRODUCT_ID 
WHERE MEMBER_SALES_RANK = 1
ORDER BY MEMBER_SALES.CUSTOMER_ID;

-- WHICH ITEM WAS PURCHASED JUST BEFORE THE CUSTOMER BECOME A MEMBER? --
WITH MEMBER_SALES
AS (
SELECT SALES.CUSTOMER_ID, SALES.ORDER_DATE, MEMBERS.JOIN_DATE, SALES.PRODUCT_ID, DENSE_RANK ()
OVER (PARTITION BY SALES.CUSTOMER_ID ORDER BY SALES.ORDER_DATE) MEMBER_SALES_RANK
FROM DANNYS_DINER.SALES AS SALES
JOIN DANNYS_DINER.MEMBERS AS MEMBERS 
ON MEMBERS.CUSTOMER_ID = SALES.CUSTOMER_ID
WHERE SALES.ORDER_DATE <= MEMBERS.JOIN_DATE
)
SELECT MEMBER_SALES.CUSTOMER_ID, MENU.PRODUCT_NAME, MEMBER_SALES.ORDER_DATE 
FROM MEMBER_SALES 
JOIN DANNYS_DINER.MENU AS MENU
ON MEMBER_SALES.PRODUCT_ID = MENU.PRODUCT_ID 
WHERE MEMBER_SALES_RANK = 1
ORDER BY MEMBER_SALES.CUSTOMER_ID;

-- WHAT IS THE TOTAL ITEM AND AMOUNT SPENT FOR EACH MEMBER BEFORE THEY BECOME A MEMBER? --
SELECT SALES.CUSTOMER_ID, COUNT(MENU.PRODUCT_NAME) AS TOTAL_ITEMS, SUM(MENU.PRICE) FROM
DANNYS_DINER.SALES JOIN DANNYS_DINER.MENU ON SALES.PRODUCT_ID = MENU.PRODUCT_ID
 JOIN DANNYS_DINER.MEMBERS ON SALES.CUSTOMER_ID = MEMBERS.CUSTOMER_ID
WHERE SALES.ORDER_DATE < MEMBERS.JOIN_DATE
GROUP BY SALES.CUSTOMER_ID
ORDER BY SALES.CUSTOMER_ID;

-- IF EACH $1 SPENT EQUATES TO 10 POINTS AND SUSHI HAS A 2X POINTS MULTIPLIER, HOW MANY POINTS WOULD EACH CUSTOMER HAVE? --
WITH POINTS_EARNED_BY_CUSTOMERS
AS (
SELECT *,
CASE 
	WHEN PRODUCT_NAME = "SUSHI" THEN PRICE*20
	ELSE PRICE*10
END AS POINTS
FROM dannys_diner.menu
)
SELECT SALES.CUSTOMER_ID, SUM(POINTS_EARNED_BY_CUSTOMERS.POINTS) AS TOTAL_POINTS
FROM dannys_diner.SALES AS SALES LEFT JOIN POINTS_EARNED_BY_CUSTOMERS
ON POINTS_EARNED_BY_CUSTOMERS.PRODUCT_ID = SALES.PRODUCT_ID
GROUP BY SALES.CUSTOMER_ID
ORDER BY SALES.CUSTOMER_ID;

-- IN THE FIRST WEEK AFTER A CUSTOMER JOINS THE PROGRAM (INCLUDING THEIR JOIN DATE) THEY EARN 2XPOINTS ON ALL ITEMS, NOT JUST SUSHI - HOW MANY POINTS DO CUSTOME A AND B HAVE AT THE END OF JANUARY? --
WITH MEMBERS_IN_FIRST_WEEK
AS (
SELECT SALES.CUSTOMER_ID, SALES.ORDER_DATE, MEMBERS.JOIN_DATE, SALES.PRODUCT_ID, MENU.PRODUCT_NAME,
MENU.PRICE,
CASE 
	WHEN SALES.ORDER_DATE < MEMBERS.JOIN_DATE THEN 0
    WHEN SALES.ORDER_DATE > MEMBERS.JOIN_DATE + INTERVAL '7' DAY THEN 0
    ELSE 1
END AS IN_FIRST_WEEK
FROM DANNYS_DINER.SALES AS SALES
INNER JOIN DANNYS_DINER.MENU AS MENU
ON SALES.PRODUCT_ID = MENU.PRODUCT_ID
INNER JOIN DANNYS_DINER.MEMBERS AS MEMBERS
ON SALES.CUSTOMER_ID = MEMBERS.CUSTOMER_ID
WHERE SALES.ORDER_DATE < "2021-02-01"
), MEMBERS_POINTS
AS (
SELECT MEMBERS_IN_FIRST_WEEK.CUSTOMER_ID, MEMBERS_IN_FIRST_WEEK.PRODUCT_ID, MEMBERS_IN_FIRST_WEEK.ORDER_DATE,
MEMBERS_IN_FIRST_WEEK.PRICE, MEMBERS_IN_FIRST_WEEK.IN_FIRST_WEEK,
CASE 
	WHEN MEMBERS_IN_FIRST_WEEK.IN_FIRST_WEEK = 1 THEN MEMBERS_IN_FIRST_WEEK.PRICE*20
	WHEN MEMBERS_IN_FIRST_WEEK.PRODUCT_ID = 1 THEN MEMBERS_IN_FIRST_WEEK.PRICE*20
    ELSE MEMBERS_IN_FIRST_WEEK.PRICE*10
    END AS POINTS
    FROM MEMBERS_IN_FIRST_WEEK
    )
    SELECT MEMBERS_POINTS.CUSTOMER_ID, SUM(MEMBERS_POINTS.POINTS) AS POINTS_EARNED
    FROM MEMBERS_POINTS
    GROUP BY MEMBERS_POINTS.CUSTOMER_ID
    ORDER BY MEMBERS_POINTS.CUSTOMER_ID;
    